//- Pug makes it DOCTYPE if we do this:
//- `doctype html`
!= "<!doctype html>"
html.h-100.no-js(lang=locale)
  head
    block meta
      meta(charset="utf-8")
      meta(http-equiv="x-ua-compatible", content="ie=edge")
      if meta && meta.title
        title= meta.title
      if meta && meta.description
        meta(name="description", content=meta.description)
      meta(name="viewport", content="width=device-width, initial-scale=1")

      //- canonical
      link(rel="canonical", href=`${config.urls.web}${ctx.path}`)

      //- languages supported
      //- <https://support.google.com/webmasters/answer/189077?hl=en>
      //- <https://support.google.com/webmasters/answer/182192?hl=en>
      //- <https://webmasters.stackexchange.com/questions/126514/should-en-and-x-default-be-included-on-the-same-page-for-hreflang-tags>
      //- <https://www.searchviu.com/en/multiple-hreflang-tags-one-url/>
      //- <https://twitter.com/JohnMu/status/837326127089729536>
      link(
        rel="alternate",
        href=`${config.urls.web}/${defaultLocale}${ctx.pathWithoutLocale === '/' ? '' : ctx.pathWithoutLocale}`,
        hreflang="x-default"
      )
      if availableLanguages
        each language in availableLanguages
          link(
            rel="alternate",
            href=`${config.urls.web}/${language.locale}${ctx.pathWithoutLocale === '/' ? '' : ctx.pathWithoutLocale}`,
            hreflang=language.locale
          )

      //- generated with https://realfavicongenerator.net
      link(
        rel="apple-touch-icon",
        sizes="152x152",
        href=manifest("img/apple-touch-icon.png"),
        integrity=manifest("img/apple-touch-icon.png", "integrity"),
        crossorigin="anonymous"
      )
      link(
        rel="icon",
        type="image/png",
        href=manifest("img/favicon-32x32.png"),
        sizes="32x32",
        integrity=manifest("img/favicon-32x32.png", "integrity"),
        crossorigin="anonymous"
      )
      link(
        rel="icon",
        type="image/png",
        href=manifest("img/favicon-16x16.png"),
        sizes="16x16",
        integrity=manifest("img/favicon-16x16.png", "integrity"),
        crossorigin="anonymous"
      )
      link(
        rel="manifest",
        href=manifest("site.webmanifest"),
        integrity=manifest("site.webmanifest", "integrity"),
        crossorigin="anonymous"
      )
      link(
        rel="mask-icon",
        href=manifest("img/safari-pinned-tab.svg"),
        integrity=manifest("img/safari-pinned-tab.svg", "integrity"),
        color=config.appColor,
        crossorigin="anonymous"
      )
      meta(name="apple-mobile-web-app-title", content=config.appName)
      meta(name="application-name", content=config.appName)
      meta(name="msapplication-TileColor", content=config.appColor)
      meta(name="theme-color", content="#ffffff")

      script.
        document.documentElement.className = "h-100";
      if isBot(ctx.get('User-Agent'))
        style= ".is-bot { display: none !important; }"

      //- associate with wikipedia
      script(type="application/ld+json").
        {
          "@context": "http://schema.org",
          "@type": "Organization",
          "url": "https://forwardemail.net",
          "name": "Forward Email",
          "legalName": "Forward Email",
          "logo": "https://forwardemail.net/img/social.png",
          "sameAs": ["https://en.wikipedia.org/wiki/Forward_Email"]
        }

    //- add opengraph tags to your structured data pages
    block opengraph
      link(
        rel="image_src",
        type="image/png",
        href=manifest("img/social.png"),
        integrity=manifest("img/social.png", "integrity"),
        crossorigin="anonymous"
      )
      meta(property="og:title", content=meta.title)
      meta(property="og:url", content=`${config.urls.web}${ctx.path}`)
      meta(property="og:description", content=meta.description)
      meta(property="og:image", content=`${config.urls.web}/img/social.png`)
      meta(name="twitter:card", content="summary_large_image")
      meta(name="twitter:title", content=meta.title)
      meta(name="twitter:description", content=meta.description)
      meta(
        name="twitter:image:src",
        content=`${config.urls.web}/img/twitter.png`
      )

    //- prefetch fonts
    //- https://caniuse.com/link-rel-prefetch
    - const fonts = ["fa-solid-900", "fa-brands-400"];
    if !isBot(ctx.get('User-Agent'))
      - fonts.push("nunito-sans-latin-400");
      - fonts.push("nunito-sans-latin-700");
    each font in fonts
      //- integrity attribute not currently supported
      //- <https://crbug.com/981419>
      link(
        rel="preload",
        href=manifest(`fonts/${font}.woff2`),
        as="font",
        crossorigin="anonymous"
      )

    //- css file
    block stylesheets
      if isBot(ctx.get('User-Agent'))
        link(
          rel="stylesheet",
          href=manifest("css/app.css"),
          integrity=manifest("css/app.css", "integrity"),
          crossorigin="anonymous"
        )
      else
        link(
          rel="stylesheet",
          href=manifest("css/app-fonts.css"),
          integrity=manifest("css/app-fonts.css", "integrity"),
          crossorigin="anonymous"
        )
        link(
          rel="stylesheet",
          href=manifest("css/app-dark.css"),
          integrity=manifest("css/app-dark.css", "integrity"),
          crossorigin="anonymous"
        )

  body.d-flex.flex-column.min-h-100(
    role="document",
    onload=isBot(ctx.get("User-Agent")) ? "if (typeof lazyload === 'function') { lazyload(); }" : ""
  )
    - const isHelp = ctx.pathWithoutLocale && ctx.pathWithoutLocale === "/help";
    - const isRegisterOrLogin = ctx.pathWithoutLocale && ["/register", config.loginRoute].includes(ctx.pathWithoutLocale);

    //- spinner
    block spinner
      include spinner/spinner
    //- navigation
    block navigation
      include _nav

    //- body
    main.flex-grow-1.d-flex.flex-column.flex-grow-1(role="main")
      block body

    //- footer
    block footer
      include _footer

    //- scripts
    //- prettier-ignore
    block scripts
      if !isBot(ctx.get('User-Agent'))
        //- flash messaging (with koa-better-flash and sweetalert2)
        script(defer).
          window._types = {
            success: "#{ t('Success') }",
            error: "#{ t('Error') }",
            info: "#{ t('Info') }",
            warning: "#{ t('Warning') }",
            question: "#{ t('Question') }"
          };
        script(defer).
          window._messages = !{json(flash(), null, null)};

        //- set defaults for sweetalert2
        //- <https://github.com/limonte/sweetalert2/issues/763>
        script(defer).
          window._swalDefaults = {
            confirmButtonText: "#{ t('OK') }",
            cancelButtonText: "#{ t('Cancel') }",
            closeButtonAriaLabel: "#{ t('Close this dialog') }",
            reverseButtons: true,
          };

        //- set defaults for confirm prompt sweetalert2 modal
        script(defer).
          window._confirmPromptTitle = "#{ t('Are you sure?') }";
          window._confirmPromptHTML = "#{ t('Please confirm if you wish to continue.') }";

        //- set the locale to be used by front-end assets
        script(defer).
          window.LOCALE = "#{locale}";

        //- set the API endpoint to be used by front-end assets
        script(defer).
          window.API_URL = "#{config.urls.api}";

      //- set the user and API key to be used by CabinJS
      if config.env !== 'test' && !isBot(ctx.get('User-Agent'))
        //- set the user and API key to be used by CabinJS
        if user
          script(defer).
            window.USER = {
              id: "#{user.id}",
              name: "#{user[config.passport.fields.displayName]}",
              email: "#{user.email}",
            };
            window.API_TOKEN = "#{user[config.userFields.apiToken]}";
        else if ctx.sessionId
          script(defer).
            window.USER = {
              id: "#{ctx.sessionId}",
            };

      if isBot(ctx.get('User-Agent'))
        //- lazyload only support for bots
        script(
          defer,
          src=manifest("js/lazyload.js"),
          integrity=manifest("js/lazyload.js", "integrity"),
          crossorigin="anonymous"
        )
      else
        //- build
        script(
          defer,
          src=manifest("js/build.js"),
          integrity=manifest("js/build.js", "integrity"),
          crossorigin="anonymous"
        )
        //- analytics via plausible.io
        script(
          defer,
          data-domain="forwardemail.net",
          src="https://plausible.io/js/plausible.js"
        )

        //- hcaptcha (hidden from bots and admins)
        if config.hcaptchaEnabled && (!user || user.group !== 'admin')
          script(defer, src=`https://hcaptcha.com/1/api.js?hl=${locale}&recaptchacompat=off`)
