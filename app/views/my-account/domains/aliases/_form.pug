- const domainQuery = isSANB(ctx.query.domain) && (validator.isIP(ctx.query.domain) || isFQDN(ctx.query.domain)) ? ctx.query.domain : false;
if alias
  input(type="hidden", name="_method", value="PUT")
.form-row
  .form-group(class=domain ? "col" : "col col-md-6")
    label(for="input-alias-name")
      = t("Alias Name")
      = " "
      span.text-danger= t("(required)")
    .input-group
      .input-group-prepend
        button.generate-random-alias.btn.btn-dark.border-dark(
          data-target="#input-alias-name",
          type="button",
          data-toggle="tooltip",
          title=t("Generate random alias")
        )
          i.fa.fa-dice
      input#input-alias-name.form-control.border-dark(
        required,
        value=alias ? alias.name : "",
        name="name",
        autocomplete="off",
        placeholder="",
        autocorrect="off",
        spellcheck="false",
        autocapitalize="off",
        type="text"
      )
      .input-group-append
        .input-group-text.bg-dark.text-white.border-dark
          if domain
            input(type="hidden", name="domain", required, value=domain.id)
            = `@${domain.name}`
          else
            i.fa.fa-at
    ul.list-inline
      li.list-inline-item.small.text-black-50= t('Use an asterisk "*" for a catch-all alias.')
      if !domain || !domain.is_global
        li.list-inline-item.small.text-black-50!= t('We also support <a href="%s" target="_blank">regular expressions</a>.', l("/faq#do-you-support-regular-expressions-or-regex"))
  if !domain
    .form-group.col-md-6
      label(for="select-alias-domain")
        = t("Domain Name")
      select#select-alias-domain.form-control(required, name="domain")
        each domain, i in domains
          option(
            value=domain.id,
            selected=domainQuery && domainQuery === domain.name
          )
            = domain.name
            if !domain.plan || domain.plan === 'free'
              = " "
              = "("
              = t("Upgrade plan")
              = ")"
            if domain.is_global
              = " ("
              = t("Vanity Domain")
              = ")"
      - const hasFreeDomains = domains.some((domain) => !domain.plan || domain.plan === "free");
      ul.list-inline.form-text
        if hasFreeDomains
          li.list-inline-item
            a.btn.btn-sm.btn-primary(
              href=l(`/pricing${domainQuery ? `?domain=${domainQuery}` : ""}`)
            )
              i.fa.fa-angle-double-up
              = " "
              = t("Upgrade plan")
        li.list-inline-item
          a.btn.btn-sm.btn-success(
            href=l("/my-account/domains/new"),
            role="button",
            data-toggle="modal-anchor",
            data-target="#modal-domain"
          )
            i.fa.fa-plus
            = " "
            = t("Add new domain")
        if hasFreeDomains
          - const match = domains.find((domain) => domain.name === domainQuery);
          if match && match.id
            li.list-inline-item
              a.btn.btn-sm.btn-link.text-muted(
                href=l(`/my-account/domains/${match.id}`)
              )= t("Need free version?")
.form-group
  label(for="textarea-alias-recipients")
    = t("Alias Recipients")
    = " "
    span.text-danger= t("(required)")
  textarea#textarea-alias-recipients.form-control(name="recipients", rows=1)= alias && Array.isArray(alias.recipients) ? alias.recipients.join(", ") : user.email
  p.form-text.small.text-black-50= t('Recipients must be a line-break/space/comma separated list of valid email addresses, fully-qualified domain names ("FQDN"), IP addresses, and/or webhook URL\'s.  We will automatically remove duplicate entries for you and perform validation when you click "Continue" below.')
.form-group
  label(for="textarea-alias-description")
    = t("Alias Description")
    = " "
    span.text-muted= "(optional)"
  textarea#textarea-alias-description.form-control(
    name="description",
    maxlength=150,
    rows=1
  )= alias ? alias.description : ""
  p.form-text.small.text-black-50= t("Description has a max of 150 characters.")
.form-group
  label(for="input-alias-labels")
    = t("Alias Labels")
    = " "
    span.text-muted= "(optional)"
  textarea#input-alias-labels.form-control(name="labels", rows=1)= alias && Array.isArray(alias.labels) ? _.without(alias.labels, "catch-all").join(", ") : ""
  p.form-text.small.text-black-50= t("Labels must be a line-break/space/comma separated list with a maximum of 20 characters per label.")
if !domain || (domain && !domain.is_global)
  .form-group.form-check
    input#input-has-recipient-verification.form-check-input(
      type="checkbox",
      name="has_recipient_verification",
      value="true",
      checked=alias ? alias.has_recipient_verification : domain && domain.has_recipient_verification
    )
    label.form-check-label(for="input-has-recipient-verification")= t("Requires recipients to click email verification link")
    p.form-text.small.text-black-50= t("If you check this, then each email recipient will be required to click an email verification link in order for emails to flow through.")
.form-group.form-check
  input#input-is-enabled.form-check-input(
    type="checkbox",
    name="is_enabled",
    value="true",
    checked=alias ? alias.is_enabled : true
  )
  label.form-check-label(for="input-is-enabled")= t("Active")
  p.form-text.small.text-black-50= t("If you uncheck this, then this email will be deactivated and no emails will flow through.  However emails will NOT bounce until this alias is completely deleted.")
